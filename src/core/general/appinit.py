"""
  Description:    sid logger
"""

import os
import logging
import sys
from datetime import datetime
from core.general import settings
from imp import reload


def app_init(exceptionFlag='Y'):
    """ Logger is created based on main program name
        it should create a log filename
    """
    (_, dirName) = os.path.split(os.getcwd())
    mainFile = os.path.realpath(sys.argv[0])

    dirName = mainFile.split('/')[-2]
    fileName = mainFile.split('/')[-1].split('.')[0]
    """
        this creates the log file with just date format e.g. _20201122.log
    """
    log_init(dirName, fileName, exceptionFlag)

    setup_django()
    """ Exception generated by any code should be captured
        in log, hence we hook it to log_excepthook
        if you are running code manually then its best to
        set up EXCEP_MAIL as 'N' in settings.py
    """
    # if settings.EXCEP_MAIL == 'Y' and exceptionFlag == 'Y':
    #     sys.excepthook = log_excepthook
    # sys.excepthook = log_excepthook


def log_init(dirName, fileName, exceptionFlag='Y'):
    """ Logger is created based on main program name
        it should create a log filename
    """
    """
        this creates the log file with just date format e.g. _20201122.log
    """
    logFile = settings.LOG_PATH + dirName + '/'\
        + fileName + '_' + datetime.now().strftime('%Y%m%d_%H%M.log')

    reload(logging)
    logging.basicConfig(filename=logFile,
                        filemode='w',
                        level=settings.LOGGING_LEVEL,
                        format='%(asctime)s %(name)-12s - %(levelname)s - %(message)s')  # noqa

    """
        for excluded module set logging to only critical
    """
    for logm in settings.EXCLUDE_LOG_MODULES:
        logger = logging.getLogger(logm)
        logger.setLevel(logging.CRITICAL)

    """
        By default all messages are logged to file
        if you want it to be logged to screen in addition to
        log file then set LOGGING_SCREEN to True
    """
    if settings.LOGGING_SCREEN:
        """ define a Handler which writes INFO messages
            or higher to the sys.stderr
        """
        console = logging.StreamHandler()
        console.setLevel(logging.INFO)
        """
            set a format which is simpler for console use
        """
        formatter = logging.Formatter(
            '%(name)-12s: %(levelname)-8s %(message)s')
        """
         tell the handler to use this format
        """
        console.setFormatter(formatter)
        """
         add the handler to the root logger
        """
        logging.getLogger('').addHandler(console)

    logging.info("Starting job: " + fileName)
    """ Exception generated by any code should be captured
        in log, hence we hook it to log_excepthook
        if you are running code manually then its best to
        set up EXCEP_MAIL as 'N' in settings.py
    """
    # if settings.EXCEP_MAIL == 'Y' and exceptionFlag == 'Y':
    #     sys.excepthook = log_excepthook
    sys.excepthook = log_excepthook


def log_excepthook(exc_Type, exc_Value, exc_traceback):
    """ Exception generated by any code should be captured
        in log, hence we hook it to _excepthook
    """
    # import inspect
    import traceback

    # exc_info = (exc_Type, exc_Value, exc_traceback)
    tracelog = traceback.TracebackException(exc_Type, exc_Value, exc_traceback)

    logging.debug("Logging an uncaught exception %s", tracelog.stack)
    # func = inspect.currentframe().f_back.f_code

    mainFile = os.path.realpath(sys.argv[0])
    message = "Exception occured, below are the details \n"
    message += "\njob name:" + mainFile
    stackMsg = ''
    for line in tracelog.stack:
        stackMsg += "\n"
        stackMsg += "Filename: " + line.filename
        stackMsg += " Method: " + line.line
        stackMsg += " Line Number: " + str(line.lineno)
    message += "\nException:" + stackMsg

    print("sid: Job Failed!!!")
    print(stackMsg)
    logging.debug(stackMsg)


def setup_django():
    """
        call for django orm
    """
    logging.debug("Setting up django")
    django_proj_path = os.getenv("DJANGOPROJECTPATH",
                                 settings.DJANGO_PATH)
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "web.settings")
    sys.path.append(django_proj_path)
    # os.chdir(django_proj_path)
    from django.core.wsgi import get_wsgi_application
    _ = get_wsgi_application()
